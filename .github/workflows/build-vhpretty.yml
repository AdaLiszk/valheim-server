# =============================================================================
name: "Build VhPretty"

# =============================================================================
on:
  # allow manual trigger
  workflow_dispatch:
    inputs:
      version:
        description: "Semantic version you want to use"
        default: "latest"
        required: true

  # build after testing passed
  workflow_run:
    workflows: [ "Test VhPretty" ]
    paths:
      - tools/vhpretty/**/*
      - tools/vhpretty/*
    types:
      - completed

  # build when a release is made
  release:
    types:
      - created
      - edited

  # do a build just in case for each PR
  # @TODO: remove this if workflow_run works just fine
  pull_request:
    paths:
      - tools/vhpretty/**/*
      - tools/vhpretty/*
    types:
      - synchronize
      - opened

# =============================================================================
jobs:

  build-vhpretty:

    strategy:
      matrix:
        os: [ "linux", "windows" ]
        include:
          - os: linux
            runs-on: "ubuntu-latest"
          - os: windows
            runs-on: "windows-latest"

    runs-on: "${{ matrix.runs-on }}"
    name: "Build"

    env:
      binary_name: "vhpretty_${{ matrix.os }}"

    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Set up Python"
        uses: actions/setup-python@v2
        with:
          python-version: "3.6"

      - name: "Install pipenv"
        run: |
          python -m pip install --upgrade pipenv wheel

      - id: pipenv-cache
        name: "Use Pipenv Cache"
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-py${{ matrix.py-version }}-${{ hashFiles('**/Pipfile.lock') }}

      - name: "Install Dependencies (if not cached)"
        if: steps.pipenv-cache.outputs.cache-hit != 'true'
        run: |
          cd tools/vhpretty
          pipenv install --dev

      - name: "Build: ${{ env.binary_name }}"
        run: |
          cd tools/vhpretty
          pipenv run build -n vhpretty

      - name: "Upload ${{ env.binary_name }}"
        uses: actions/upload-artifact@v2
        with:
            name: ${{ env.binary_name }}
            path: tools/vhpretty/dist/${{ env.binary_name }}*


  add-to-release:
    needs: [ build-vhpretty ]
    runs-on: "ubuntu-latest"

    name: "Attach the Build to the Release"
    steps:
      - run: "echo ${{ github.event_name }}"
